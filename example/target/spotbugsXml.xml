<?xml version="1.0" encoding="utf-8"?>
<BugCollection sequence='0' release='' analysisTimestamp='1608419829930' version='4.1.4' timestamp='1608419822143'><Project projectName='example'><Jar>/Users/mike/Projects/java-reporter-action/example/target/classes</Jar><SrcDir>/Users/mike/Projects/java-reporter-action/example/src/main/java</SrcDir><WrkDir>/Users/mike/Projects/java-reporter-action/example/target</WrkDir></Project><BugInstance instanceOccurrenceNum='0' instanceHash='ccc1b8f65e52fbb65426e72e89c6a0ed' cweid='570' rank='5' abbrev='BC' category='CORRECTNESS' priority='1' type='BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY' instanceOccurrenceMax='0'><ShortMessage>Impossible downcast of toArray() result</ShortMessage><LongMessage>Impossible downcast of toArray() result to Integer[] in org.example.cpd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='13' classname='org.example.cpd.ErrorProne' start='140' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.classCastExceptionWithToArray()</Message></Method><Type role='TYPE_FOUND' descriptor='[Ljava/lang/Object;'><Message>Actual type Object[]</Message></Type><Type role='TYPE_EXPECTED' descriptor='[Ljava/lang/Integer;'><Message>Expected Integer[]</Message></Type><Method isStatic='false' role='METHOD_RETURN_VALUE_OF' classname='java.util.Collection' signature='()[Ljava/lang/Object;' name='toArray'><SourceLine classname='java.util.Collection' sourcepath='java/util/Collection.java' sourcefile='Collection.java'></SourceLine><Message>Return value of java.util.Collection.toArray() of type Object[]</Message></Method><SourceLine endBytecode='25' classname='org.example.cpd.ErrorProne' start='142' end='142' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='25' primary='true'><Message>At ErrorProne.java:[line 142]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='965f9d80906940f380cdde9ee3f4fa7a' cweid='563' rank='17' abbrev='DLS' category='STYLE' priority='2' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to array in org.example.cpd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='13' classname='org.example.cpd.ErrorProne' start='140' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.classCastExceptionWithToArray()</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='29' name='array' register='2'><Message>Local variable named array</Message></LocalVariable><SourceLine endBytecode='28' classname='org.example.cpd.ErrorProne' start='142' end='142' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='28' primary='true'><Message>At ErrorProne.java:[line 142]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='array'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='83916971976640cc9f981b7997217c94' cweid='440' rank='7' abbrev='DMI' category='CORRECTNESS' priority='2' type='DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE' instanceOccurrenceMax='0'><ShortMessage>BigDecimal constructed from double that isn't represented precisely</ShortMessage><LongMessage>BigDecimal constructed from 1.123 in org.example.cpd.ErrorProne.avoidDecimalLiteralsInBigDecimalConstructor()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()Ljava/math/BigDecimal;' name='avoidDecimalLiteralsInBigDecimalConstructor' primary='true'><SourceLine endBytecode='52' classname='org.example.cpd.ErrorProne' start='116' end='116' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.avoidDecimalLiteralsInBigDecimalConstructor()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(D)V' name='&lt;init&gt;'><SourceLine endBytecode='64' classname='java.math.BigDecimal' start='901' end='902' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method new java.math.BigDecimal(double)</Message></Method><Method isStatic='true' role='METHOD_ALTERNATIVE_TARGET' classname='java.math.BigDecimal' signature='(D)Ljava/math/BigDecimal;' name='valueOf'><SourceLine endBytecode='53' classname='java.math.BigDecimal' start='1305' end='1305' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Did you intend to invoke java.math.BigDecimal.valueOf(double)</Message></Method><String value='1.123'><Message>Value 1.123</Message></String><String value='1.1229999999999999982236431605997495353221893310546875'><Message>Value 1.1229999999999999982236431605997495353221893310546875</Message></String><SourceLine endBytecode='7' classname='org.example.cpd.ErrorProne' start='116' end='116' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='7' primary='true'><Message>At ErrorProne.java:[line 116]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a747a24637ebd304361fdadeff4ba358' rank='18' abbrev='Bx' category='PERFORMANCE' priority='2' type='DM_BOXED_PRIMITIVE_TOSTRING' instanceOccurrenceMax='0'><ShortMessage>Method allocates a boxed primitive just to call toString</ShortMessage><LongMessage>Primitive boxed just to call toString in org.example.cpd.ErrorProne.unnecessaryConversionTemporary(int)</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='(I)Ljava/lang/String;' name='unnecessaryConversionTemporary' primary='true'><SourceLine endBytecode='63' classname='org.example.cpd.ErrorProne' start='37' end='37' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.unnecessaryConversionTemporary(int)</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.Integer' signature='()Ljava/lang/String;' name='toString'><SourceLine endBytecode='49' classname='java.lang.Integer' start='1180' end='1180' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Called method Integer.toString()</Message></Method><Method isStatic='true' role='SHOULD_CALL' classname='java.lang.Integer' signature='(I)Ljava/lang/String;' name='toString'><Message>Should call Integer.toString(int) instead</Message></Method><SourceLine endBytecode='8' classname='org.example.cpd.ErrorProne' start='37' end='37' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='8' primary='true'><Message>At ErrorProne.java:[line 37]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='2f7cd84f7c7ddddf253702726911190b' rank='18' abbrev='Bx' category='PERFORMANCE' priority='2' type='DM_NUMBER_CTOR' instanceOccurrenceMax='0'><ShortMessage>Method invokes inefficient Number constructor; use static valueOf instead</ShortMessage><LongMessage>org.example.cpd.ErrorProne.unnecessaryConversionTemporary(int) invokes inefficient new Integer(int) constructor; use Integer.valueOf(int) instead</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='(I)Ljava/lang/String;' name='unnecessaryConversionTemporary' primary='true'><SourceLine endBytecode='63' classname='org.example.cpd.ErrorProne' start='37' end='37' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.unnecessaryConversionTemporary(int)</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.Integer' signature='(I)V' name='&lt;init&gt;'><SourceLine endBytecode='69' classname='java.lang.Integer' start='1088' end='1090' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Called method new Integer(int)</Message></Method><Method isStatic='true' role='SHOULD_CALL' classname='java.lang.Integer' signature='(I)Ljava/lang/Integer;' name='valueOf'><SourceLine endBytecode='90' classname='java.lang.Integer' start='1063' end='1065' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Should call Integer.valueOf(int) instead</Message></Method><SourceLine endBytecode='5' classname='org.example.cpd.ErrorProne' start='37' end='37' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='5' primary='true'><Message>At ErrorProne.java:[line 37]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='4496835d7428a3262391f4f0f357307' cweid='585' rank='14' abbrev='ESync' category='MT_CORRECTNESS' priority='2' type='ESync_EMPTY_SYNC' instanceOccurrenceMax='0'><ShortMessage>Empty synchronized block</ShortMessage><LongMessage>Empty synchronized block in org.example.cpd.ErrorProne.emptySynchronizedBlock()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='emptySynchronizedBlock' primary='true'><SourceLine endBytecode='107' classname='org.example.cpd.ErrorProne' start='87' end='90' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.emptySynchronizedBlock()</Message></Method><SourceLine endBytecode='5' classname='org.example.cpd.ErrorProne' start='89' end='89' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='5' primary='true'><Message>At ErrorProne.java:[line 89]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='699ef2ce7487b417d3df925c4fa9c145' rank='8' abbrev='IL' category='CORRECTNESS' priority='1' type='IL_INFINITE_LOOP' instanceOccurrenceMax='0'><ShortMessage>An apparent infinite loop</ShortMessage><LongMessage>There is an apparent infinite loop in org.example.cpd.ErrorProne.jumbledIncrementer()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='jumbledIncrementer' primary='true'><SourceLine endBytecode='141' classname='org.example.cpd.ErrorProne' start='99' end='104' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.jumbledIncrementer()</Message></Method><SourceLine endBytecode='13' classname='org.example.cpd.ErrorProne' start='100' end='100' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='13' primary='true'><Message>At ErrorProne.java:[line 100]</Message></SourceLine><SourceLine role='SOURCE_LINE_LOOP_BOTTOM' endBytecode='28' classname='org.example.cpd.ErrorProne' start='100' end='100' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='28'><Message>Loop bottom at ErrorProne.java:[line 100]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='5f2c372fec41f2ddb37d60263f96af6c' cweid='476' rank='5' abbrev='NP' category='CORRECTNESS' priority='1' type='NP_ALWAYS_NULL' instanceOccurrenceMax='0'><ShortMessage>Null pointer dereference</ShortMessage><LongMessage>Null pointer dereference of string in org.example.cpd.ErrorProne.brokenNullCheck(String)</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='(Ljava/lang/String;)Ljava/lang/String;' name='brokenNullCheck' primary='true'><SourceLine endBytecode='86' classname='org.example.cpd.ErrorProne' start='128' end='131' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.brokenNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='5' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine role='SOURCE_LINE_DEREF' endBytecode='7' classname='org.example.cpd.ErrorProne' start='128' end='128' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='7' primary='true'><Message>Dereferenced at ErrorProne.java:[line 128]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='16fbf43ca05b91928ab98c50f8e4cb77' cweid='476' rank='16' abbrev='NP' category='STYLE' priority='2' type='NP_LOAD_OF_KNOWN_NULL_VALUE' instanceOccurrenceMax='0'><ShortMessage>Load of known null value</ShortMessage><LongMessage>Load of known null value in org.example.cpd.ErrorProne.brokenNullCheck(String)</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='(Ljava/lang/String;)Ljava/lang/String;' name='brokenNullCheck' primary='true'><SourceLine endBytecode='9' classname='org.example.cpd.ErrorProne' start='128' end='131' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.brokenNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='1' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine endBytecode='4' classname='org.example.cpd.ErrorProne' start='128' end='128' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='4' primary='true'><Message>At ErrorProne.java:[line 128]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='b641d17ee8bb552ae08850b33bf9357' rank='20' abbrev='OBL' category='EXPERIMENTAL' priority='2' type='OBL_UNSATISFIED_OBLIGATION' instanceOccurrenceMax='0'><ShortMessage>Method may fail to clean up stream or resource</ShortMessage><LongMessage>org.example.cpd.ErrorProne.checkSkipResult() may fail to clean up java.io.InputStream</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='76' classname='org.example.cpd.ErrorProne' start='135' end='137' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.checkSkipResult()</Message></Method><Class role='CLASS_REFTYPE' classname='java.io.InputStream'><SourceLine classname='java.io.InputStream' start='61' end='780' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 61-780]</Message></SourceLine><Message>Reference type java.io.InputStream</Message></Class><Int role='INT_OBLIGATIONS_REMAINING' value='1'><Message>1 instances of obligation remaining</Message></Int><SourceLine role='SOURCE_LINE_OBLIGATION_CREATED' endBytecode='6' classname='org.example.cpd.ErrorProne' start='135' end='135' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='6' primary='true'><Message>Obligation to clean up resource created at ErrorProne.java:[line 135] is not discharged</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='10' classname='org.example.cpd.ErrorProne' start='136' end='136' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='10'><Message>Path continues at ErrorProne.java:[line 136]</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='16' classname='org.example.cpd.ErrorProne' start='137' end='137' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='16'><Message>Path continues at ErrorProne.java:[line 137]</Message></SourceLine><String role='STRING_REMAINING_OBLIGATIONS' value='{InputStream x 1}'><Message>Remaining obligations: {InputStream x 1}</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='90bd7d2236d612324adfb231b04b6df9' rank='16' abbrev='OS' category='BAD_PRACTICE' priority='2' type='OS_OPEN_STREAM' instanceOccurrenceMax='0'><ShortMessage>Method may fail to close stream</ShortMessage><LongMessage>org.example.cpd.ErrorProne.checkSkipResult() may fail to close stream</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='9' classname='org.example.cpd.ErrorProne' start='135' end='137' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.checkSkipResult()</Message></Method><Type role='TYPE_CLOSEIT' descriptor='Ljava/io/InputStream;'><SourceLine classname='java.io.InputStream' start='61' end='780' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 61-780]</Message></SourceLine><Message>Need to close java.io.InputStream </Message></Type><SourceLine endBytecode='0' classname='org.example.cpd.ErrorProne' start='135' end='135' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0' primary='true'><Message>At ErrorProne.java:[line 135]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='274ad16c69b6570ce3242ae480e44011' rank='17' abbrev='QF' category='STYLE' priority='2' type='QF_QUESTIONABLE_FOR_LOOP' instanceOccurrenceMax='0'><ShortMessage>Complicated, subtle or wrong increment in for-loop</ShortMessage><LongMessage>Complicated, subtle or wrong increment in for-loop org.example.cpd.ErrorProne.jumbledIncrementer()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='jumbledIncrementer' primary='true'><SourceLine endBytecode='141' classname='org.example.cpd.ErrorProne' start='99' end='104' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.jumbledIncrementer()</Message></Method><SourceLine endBytecode='13' classname='org.example.cpd.ErrorProne' start='100' end='100' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='13' primary='true'><Message>At ErrorProne.java:[line 100]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='1725140d3182e0aaea1a9463219299e' cweid='476' rank='11' abbrev='RCN' category='CORRECTNESS' priority='2' type='RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE' instanceOccurrenceMax='0'><ShortMessage>Nullcheck of value previously dereferenced</ShortMessage><LongMessage>Nullcheck of string at line 14 of value previously dereferenced in org.example.cpd.ErrorProne.misplacedNullCheck(String)</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='(Ljava/lang/String;)Z' name='misplacedNullCheck' primary='true'><SourceLine endBytecode='81' classname='org.example.cpd.ErrorProne' start='14' end='14' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.misplacedNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='9' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine endBytecode='3' classname='org.example.cpd.ErrorProne' start='14' end='14' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='3' primary='true'><Message>At ErrorProne.java:[line 14]</Message></SourceLine><SourceLine role='SOURCE_REDUNDANT_NULL_CHECK' endBytecode='10' classname='org.example.cpd.ErrorProne' start='14' end='14' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='10'><Message>Redundant null check at ErrorProne.java:[line 14]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='861ed6fb4d53912cca544d838d5f28fe' cweid='440' rank='3' abbrev='RV' category='CORRECTNESS' priority='1' type='RV_RETURN_VALUE_IGNORED' instanceOccurrenceMax='0'><ShortMessage>Method ignores return value</ShortMessage><LongMessage>Return value of java.math.BigDecimal.add(BigDecimal) ignored in org.example.cpd.ErrorProne.uselessOperationOnImmutable()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='uselessOperationOnImmutable' primary='true'><SourceLine endBytecode='83' classname='org.example.cpd.ErrorProne' start='45' end='47' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.uselessOperationOnImmutable()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;' name='add'><SourceLine endBytecode='199' classname='java.math.BigDecimal' start='1318' end='1328' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method java.math.BigDecimal.add(BigDecimal)</Message></Method><SourceLine endBytecode='19' classname='org.example.cpd.ErrorProne' start='46' end='46' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='19' primary='true'><Message>At ErrorProne.java:[line 46]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='906769776a8b98e6506ea9d24d22ecdf' rank='16' abbrev='RR' category='BAD_PRACTICE' priority='2' type='SR_NOT_CHECKED' instanceOccurrenceMax='0'><ShortMessage>Method ignores results of InputStream.skip()</ShortMessage><LongMessage>org.example.cpd.ErrorProne.checkSkipResult() ignores result of java.io.FileInputStream.skip(long)</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='76' classname='org.example.cpd.ErrorProne' start='135' end='137' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.checkSkipResult()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.io.FileInputStream' signature='(J)J' name='skip'><SourceLine endBytecode='57' classname='java.io.FileInputStream' start='300' end='300' sourcepath='java/io/FileInputStream.java' sourcefile='FileInputStream.java' startBytecode='0'></SourceLine><Message>Called method java.io.FileInputStream.skip(long)</Message></Method><SourceLine endBytecode='12' classname='org.example.cpd.ErrorProne' start='136' end='136' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='12' primary='true'><Message>At ErrorProne.java:[line 136]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='224870247d7479bc8b8ca6a4d40b2a77' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_OBJECT' instanceOccurrenceMax='0'><ShortMessage>Useless object created</ShortMessage><LongMessage>Useless object stored in variable collection of method org.example.cpd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='103' classname='org.example.cpd.ErrorProne' start='140' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.classCastExceptionWithToArray()</Message></Method><String value='collection'><Message>Value collection</Message></String><Type descriptor='Ljava/util/ArrayList;'><SourceLine classname='java.util.ArrayList' start='123' end='1729' sourcepath='java/util/ArrayList.java' sourcefile='ArrayList.java'><Message>At ArrayList.java:[lines 123-1729]</Message></SourceLine><Message>Type java.util.ArrayList</Message></Type><SourceLine endBytecode='4' classname='org.example.cpd.ErrorProne' start='140' end='140' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='4' primary='true'><Message>At ErrorProne.java:[line 140]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='73553effa02ab6be02f1a74ab1c1e8eb' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.cpd.ErrorProne.avoidBranchingStatementAsLastInLoop() seems to be useless</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='avoidBranchingStatementAsLastInLoop' primary='true'><SourceLine endBytecode='101' classname='org.example.cpd.ErrorProne' start='107' end='113' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.avoidBranchingStatementAsLastInLoop()</Message></Method><SourceLine endBytecode='22' classname='org.example.cpd.ErrorProne' start='113' end='113' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='22' primary='true'><Message>At ErrorProne.java:[line 113]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='8df9560e91951a7e88b5c292e10fd976' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.cpd.ErrorProne.classCastExceptionWithToArray() seems to be useless</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='103' classname='org.example.cpd.ErrorProne' start='140' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.classCastExceptionWithToArray()</Message></Method><SourceLine endBytecode='29' classname='org.example.cpd.ErrorProne' start='143' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='29' primary='true'><Message>At ErrorProne.java:[line 143]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='b05f904f969b9ff4bea6361a0ef4dda6' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.cpd.ErrorProne.dontUseFloatTypeForLoopIndices() seems to be useless</LongMessage><Class classname='org.example.cpd.ErrorProne' primary='true'><SourceLine classname='org.example.cpd.ErrorProne' start='9' end='143' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 9-143]</Message></SourceLine><Message>In class org.example.cpd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.cpd.ErrorProne' signature='()V' name='dontUseFloatTypeForLoopIndices' primary='true'><SourceLine endBytecode='87' classname='org.example.cpd.ErrorProne' start='50' end='53' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.cpd.ErrorProne.dontUseFloatTypeForLoopIndices()</Message></Method><SourceLine endBytecode='16' classname='org.example.cpd.ErrorProne' start='53' end='53' sourcepath='org/example/cpd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='16' primary='true'><Message>At ErrorProne.java:[line 53]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='20afd6adebe08c85c30c551ed256e388' cweid='476' rank='5' abbrev='NP' category='CORRECTNESS' priority='1' type='NP_ALWAYS_NULL' instanceOccurrenceMax='0'><ShortMessage>Null pointer dereference</ShortMessage><LongMessage>Null pointer dereference of conn in org.example.pmd.BestPractices.checkResultSet()</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Method isStatic='false' classname='org.example.pmd.BestPractices' signature='()V' name='checkResultSet' primary='true'><SourceLine endBytecode='113' classname='org.example.pmd.BestPractices' start='15' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.BestPractices.checkResultSet()</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='2' name='conn' register='1'><Message>Value loaded from conn</Message></LocalVariable><SourceLine role='SOURCE_LINE_DEREF' endBytecode='3' classname='org.example.pmd.BestPractices' start='16' end='16' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='3' primary='true'><Message>Dereferenced at BestPractices.java:[line 16]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c10ee4fc50bf4f8ec1f564be44a1cadc' rank='20' abbrev='OBL' category='EXPERIMENTAL' priority='2' type='OBL_UNSATISFIED_OBLIGATION' instanceOccurrenceMax='0'><ShortMessage>Method may fail to clean up stream or resource</ShortMessage><LongMessage>org.example.pmd.BestPractices.checkResultSet() may fail to clean up java.sql.ResultSet</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Method isStatic='false' classname='org.example.pmd.BestPractices' signature='()V' name='checkResultSet' primary='true'><SourceLine endBytecode='113' classname='org.example.pmd.BestPractices' start='15' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.BestPractices.checkResultSet()</Message></Method><Class role='CLASS_REFTYPE' classname='java.sql.ResultSet'><SourceLine classname='java.sql.ResultSet' start='4186' end='4287' sourcepath='java/sql/ResultSet.java' sourcefile='ResultSet.java'><Message>At ResultSet.java:[lines 4186-4287]</Message></SourceLine><Message>Reference type java.sql.ResultSet</Message></Class><Int role='INT_OBLIGATIONS_REMAINING' value='1'><Message>1 instances of obligation remaining</Message></Int><SourceLine role='SOURCE_LINE_OBLIGATION_CREATED' endBytecode='12' classname='org.example.pmd.BestPractices' start='17' end='17' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='12' primary='true'><Message>Obligation to clean up resource created at BestPractices.java:[line 17] is not discharged</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='18' classname='org.example.pmd.BestPractices' start='18' end='18' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='18'><Message>Path continues at BestPractices.java:[line 18]</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='25' classname='org.example.pmd.BestPractices' start='19' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='25'><Message>Path continues at BestPractices.java:[line 19]</Message></SourceLine><String role='STRING_REMAINING_OBLIGATIONS' value='{Statement x 1,ResultSet x 1}'><Message>Remaining obligations: {Statement x 1,ResultSet x 1}</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ad3e07a5fbfcbd1716340cd45b7567d5' rank='20' abbrev='OBL' category='EXPERIMENTAL' priority='2' type='OBL_UNSATISFIED_OBLIGATION' instanceOccurrenceMax='0'><ShortMessage>Method may fail to clean up stream or resource</ShortMessage><LongMessage>org.example.pmd.BestPractices.checkResultSet() may fail to clean up java.sql.Statement</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Method isStatic='false' classname='org.example.pmd.BestPractices' signature='()V' name='checkResultSet' primary='true'><SourceLine endBytecode='113' classname='org.example.pmd.BestPractices' start='15' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.BestPractices.checkResultSet()</Message></Method><Class role='CLASS_REFTYPE' classname='java.sql.Statement'><SourceLine classname='java.sql.Statement' start='1096' end='1647' sourcepath='java/sql/Statement.java' sourcefile='Statement.java'><Message>At Statement.java:[lines 1096-1647]</Message></SourceLine><Message>Reference type java.sql.Statement</Message></Class><Int role='INT_OBLIGATIONS_REMAINING' value='1'><Message>1 instances of obligation remaining</Message></Int><SourceLine role='SOURCE_LINE_OBLIGATION_CREATED' endBytecode='3' classname='org.example.pmd.BestPractices' start='16' end='16' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='3' primary='true'><Message>Obligation to clean up resource created at BestPractices.java:[line 16] is not discharged</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='9' classname='org.example.pmd.BestPractices' start='17' end='17' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='9'><Message>Path continues at BestPractices.java:[line 17]</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='18' classname='org.example.pmd.BestPractices' start='18' end='18' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='18'><Message>Path continues at BestPractices.java:[line 18]</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='25' classname='org.example.pmd.BestPractices' start='19' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='25'><Message>Path continues at BestPractices.java:[line 19]</Message></SourceLine><String role='STRING_REMAINING_OBLIGATIONS' value='{Statement x 1,ResultSet x 1}'><Message>Remaining obligations: {Statement x 1,ResultSet x 1}</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='205bb5be5cc933e58baed423e782d183' rank='16' abbrev='ODR' category='BAD_PRACTICE' priority='2' type='ODR_OPEN_DATABASE_RESOURCE' instanceOccurrenceMax='0'><ShortMessage>Method may fail to close database resource</ShortMessage><LongMessage>org.example.pmd.BestPractices.checkResultSet() may fail to close Statement</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Method isStatic='false' classname='org.example.pmd.BestPractices' signature='()V' name='checkResultSet' primary='true'><SourceLine endBytecode='12' classname='org.example.pmd.BestPractices' start='15' end='19' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.BestPractices.checkResultSet()</Message></Method><Type role='TYPE_CLOSEIT' descriptor='Ljava/sql/Statement;'><SourceLine classname='java.sql.Statement' start='1096' end='1647' sourcepath='java/sql/Statement.java' sourcefile='Statement.java'><Message>At Statement.java:[lines 1096-1647]</Message></SourceLine><Message>Need to close java.sql.Statement </Message></Type><SourceLine endBytecode='3' classname='org.example.pmd.BestPractices' start='16' end='16' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='3' primary='true'><Message>At BestPractices.java:[line 16]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='d8658f4d40d2bdd52973b7013a714b9f' rank='18' abbrev='UrF' category='STYLE' priority='2' type='URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD' instanceOccurrenceMax='0'><ShortMessage>Unread public/protected field</ShortMessage><LongMessage>Unread public/protected field: org.example.pmd.BestPractices.ipAddress</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Field isStatic='false' classname='org.example.pmd.BestPractices' signature='Ljava/lang/String;' name='ipAddress' primary='true'><SourceLine classname='org.example.pmd.BestPractices' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>In BestPractices.java</Message></SourceLine><Message>Field org.example.pmd.BestPractices.ipAddress</Message></Field><SourceLine endBytecode='7' classname='org.example.pmd.BestPractices' start='11' end='11' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java' startBytecode='7' primary='true'><Message>At BestPractices.java:[line 11]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='90db0b67411b7c4f423cd8d95d7d795e' rank='18' abbrev='UuF' category='PERFORMANCE' priority='2' type='UUF_UNUSED_FIELD' instanceOccurrenceMax='0'><ShortMessage>Unused field</ShortMessage><LongMessage>Unused field: org.example.pmd.BestPractices.unusedPrivateField</LongMessage><Class classname='org.example.pmd.BestPractices' primary='true'><SourceLine classname='org.example.pmd.BestPractices' start='9' end='23' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>At BestPractices.java:[lines 9-23]</Message></SourceLine><Message>In class org.example.pmd.BestPractices</Message></Class><Field isStatic='false' classname='org.example.pmd.BestPractices' signature='Ljava/lang/String;' name='unusedPrivateField' primary='true'><SourceLine classname='org.example.pmd.BestPractices' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>In BestPractices.java</Message></SourceLine><Message>Field org.example.pmd.BestPractices.unusedPrivateField</Message></Field><SourceLine synthetic='true' classname='org.example.pmd.BestPractices' sourcepath='org/example/pmd/BestPractices.java' sourcefile='BestPractices.java'><Message>In BestPractices.java</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='33b5da59922d8fc7fff98db46f7dfad3' cweid='563' rank='17' abbrev='DLS' category='STYLE' priority='2' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to instance in org.example.pmd.CodeStyle.uselessQualifiedThis()</LongMessage><Class classname='org.example.pmd.CodeStyle' primary='true'><SourceLine classname='org.example.pmd.CodeStyle' start='12' end='42' sourcepath='org/example/pmd/CodeStyle.java' sourcefile='CodeStyle.java'><Message>At CodeStyle.java:[lines 12-42]</Message></SourceLine><Message>In class org.example.pmd.CodeStyle</Message></Class><Method isStatic='false' classname='org.example.pmd.CodeStyle' signature='()V' name='uselessQualifiedThis' primary='true'><SourceLine endBytecode='2' classname='org.example.pmd.CodeStyle' start='41' end='42' sourcepath='org/example/pmd/CodeStyle.java' sourcefile='CodeStyle.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.CodeStyle.uselessQualifiedThis()</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='2' name='instance' register='1'><Message>Local variable named instance</Message></LocalVariable><SourceLine endBytecode='1' classname='org.example.pmd.CodeStyle' start='41' end='41' sourcepath='org/example/pmd/CodeStyle.java' sourcefile='CodeStyle.java' startBytecode='1' primary='true'><Message>At CodeStyle.java:[line 41]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.COPY_VALUE' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='instance'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='bb6f9f873da5af47bb64bd35f048af02' cweid='563' rank='17' abbrev='DLS' category='STYLE' priority='2' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to x in org.example.pmd.Design.collapsibleIfStatements(boolean, boolean)</LongMessage><Class classname='org.example.pmd.Design' primary='true'><SourceLine classname='org.example.pmd.Design' start='3' end='18' sourcepath='org/example/pmd/Design.java' sourcefile='Design.java'><Message>At Design.java:[lines 3-18]</Message></SourceLine><Message>In class org.example.pmd.Design</Message></Class><Method isStatic='false' classname='org.example.pmd.Design' signature='(ZZ)V' name='collapsibleIfStatements' primary='true'><SourceLine endBytecode='6' classname='org.example.pmd.Design' start='6' end='11' sourcepath='org/example/pmd/Design.java' sourcefile='Design.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.Design.collapsibleIfStatements(boolean, boolean)</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='10' name='x' register='1'><Message>Local variable named x</Message></LocalVariable><SourceLine endBytecode='9' classname='org.example.pmd.Design' start='8' end='8' sourcepath='org/example/pmd/Design.java' sourcefile='Design.java' startBytecode='9' primary='true'><Message>At Design.java:[line 8]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.BASE_VALUE' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.COPY_VALUE' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.IS_PARAMETER' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='x'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.TWO_STORES_MULTIPLE_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='b0d3825e02bbe4192200f09f20cdb5c5' cweid='570' rank='5' abbrev='BC' category='CORRECTNESS' priority='1' type='BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY' instanceOccurrenceMax='0'><ShortMessage>Impossible downcast of toArray() result</ShortMessage><LongMessage>Impossible downcast of toArray() result to Integer[] in org.example.pmd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='13' classname='org.example.pmd.ErrorProne' start='49' end='52' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.classCastExceptionWithToArray()</Message></Method><Type role='TYPE_FOUND' descriptor='[Ljava/lang/Object;'><Message>Actual type Object[]</Message></Type><Type role='TYPE_EXPECTED' descriptor='[Ljava/lang/Integer;'><Message>Expected Integer[]</Message></Type><Method isStatic='false' role='METHOD_RETURN_VALUE_OF' classname='java.util.Collection' signature='()[Ljava/lang/Object;' name='toArray'><SourceLine classname='java.util.Collection' sourcepath='java/util/Collection.java' sourcefile='Collection.java'></SourceLine><Message>Return value of java.util.Collection.toArray() of type Object[]</Message></Method><SourceLine endBytecode='25' classname='org.example.pmd.ErrorProne' start='51' end='51' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='25' primary='true'><Message>At ErrorProne.java:[line 51]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='5d0fdfb65972f8a9470fcffb54910062' cweid='563' rank='17' abbrev='DLS' category='STYLE' priority='2' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to array in org.example.pmd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='13' classname='org.example.pmd.ErrorProne' start='49' end='52' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.classCastExceptionWithToArray()</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='29' name='array' register='2'><Message>Local variable named array</Message></LocalVariable><SourceLine endBytecode='28' classname='org.example.pmd.ErrorProne' start='51' end='51' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='28' primary='true'><Message>At ErrorProne.java:[line 51]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='array'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.NO_LOADS' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='95cd5474691770a5450fdcbb29a367c8' cweid='440' rank='7' abbrev='DMI' category='CORRECTNESS' priority='2' type='DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE' instanceOccurrenceMax='0'><ShortMessage>BigDecimal constructed from double that isn't represented precisely</ShortMessage><LongMessage>BigDecimal constructed from 1.123 in org.example.pmd.ErrorProne.avoidDecimalLiteralsInBigDecimalConstructor()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()Ljava/math/BigDecimal;' name='avoidDecimalLiteralsInBigDecimalConstructor' primary='true'><SourceLine endBytecode='52' classname='org.example.pmd.ErrorProne' start='25' end='25' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.avoidDecimalLiteralsInBigDecimalConstructor()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(D)V' name='&lt;init&gt;'><SourceLine endBytecode='64' classname='java.math.BigDecimal' start='901' end='902' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method new java.math.BigDecimal(double)</Message></Method><Method isStatic='true' role='METHOD_ALTERNATIVE_TARGET' classname='java.math.BigDecimal' signature='(D)Ljava/math/BigDecimal;' name='valueOf'><SourceLine endBytecode='53' classname='java.math.BigDecimal' start='1305' end='1305' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Did you intend to invoke java.math.BigDecimal.valueOf(double)</Message></Method><String value='1.123'><Message>Value 1.123</Message></String><String value='1.1229999999999999982236431605997495353221893310546875'><Message>Value 1.1229999999999999982236431605997495353221893310546875</Message></String><SourceLine endBytecode='7' classname='org.example.pmd.ErrorProne' start='25' end='25' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='7' primary='true'><Message>At ErrorProne.java:[line 25]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='4da10346acc56751ad280db115e638ee' rank='18' abbrev='Bx' category='PERFORMANCE' priority='2' type='DM_BOXED_PRIMITIVE_TOSTRING' instanceOccurrenceMax='0'><ShortMessage>Method allocates a boxed primitive just to call toString</ShortMessage><LongMessage>Primitive boxed just to call toString in org.example.pmd.ErrorProne.unnecessaryConversionTemporary(int)</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='(I)Ljava/lang/String;' name='unnecessaryConversionTemporary' primary='true'><SourceLine endBytecode='63' classname='org.example.pmd.ErrorProne' start='135' end='135' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.unnecessaryConversionTemporary(int)</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.Integer' signature='()Ljava/lang/String;' name='toString'><SourceLine endBytecode='49' classname='java.lang.Integer' start='1180' end='1180' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Called method Integer.toString()</Message></Method><Method isStatic='true' role='SHOULD_CALL' classname='java.lang.Integer' signature='(I)Ljava/lang/String;' name='toString'><Message>Should call Integer.toString(int) instead</Message></Method><SourceLine endBytecode='8' classname='org.example.pmd.ErrorProne' start='135' end='135' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='8' primary='true'><Message>At ErrorProne.java:[line 135]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a2da05a40734e59ceb38d7bcb5e1dc4f' rank='18' abbrev='Bx' category='PERFORMANCE' priority='2' type='DM_NUMBER_CTOR' instanceOccurrenceMax='0'><ShortMessage>Method invokes inefficient Number constructor; use static valueOf instead</ShortMessage><LongMessage>org.example.pmd.ErrorProne.unnecessaryConversionTemporary(int) invokes inefficient new Integer(int) constructor; use Integer.valueOf(int) instead</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='(I)Ljava/lang/String;' name='unnecessaryConversionTemporary' primary='true'><SourceLine endBytecode='63' classname='org.example.pmd.ErrorProne' start='135' end='135' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.unnecessaryConversionTemporary(int)</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.lang.Integer' signature='(I)V' name='&lt;init&gt;'><SourceLine endBytecode='69' classname='java.lang.Integer' start='1088' end='1090' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Called method new Integer(int)</Message></Method><Method isStatic='true' role='SHOULD_CALL' classname='java.lang.Integer' signature='(I)Ljava/lang/Integer;' name='valueOf'><SourceLine endBytecode='90' classname='java.lang.Integer' start='1063' end='1065' sourcepath='java/lang/Integer.java' sourcefile='Integer.java' startBytecode='0'></SourceLine><Message>Should call Integer.valueOf(int) instead</Message></Method><SourceLine endBytecode='5' classname='org.example.pmd.ErrorProne' start='135' end='135' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='5' primary='true'><Message>At ErrorProne.java:[line 135]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c5d06ef6bce7ef4f32b0e3649aa0f612' cweid='585' rank='14' abbrev='ESync' category='MT_CORRECTNESS' priority='2' type='ESync_EMPTY_SYNC' instanceOccurrenceMax='0'><ShortMessage>Empty synchronized block</ShortMessage><LongMessage>Empty synchronized block in org.example.pmd.ErrorProne.emptySynchronizedBlock()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='emptySynchronizedBlock' primary='true'><SourceLine endBytecode='107' classname='org.example.pmd.ErrorProne' start='92' end='95' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.emptySynchronizedBlock()</Message></Method><SourceLine endBytecode='5' classname='org.example.pmd.ErrorProne' start='94' end='94' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='5' primary='true'><Message>At ErrorProne.java:[line 94]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ad89dcab2475dc5357a5f8e5fdaca3c' rank='8' abbrev='IL' category='CORRECTNESS' priority='1' type='IL_INFINITE_LOOP' instanceOccurrenceMax='0'><ShortMessage>An apparent infinite loop</ShortMessage><LongMessage>There is an apparent infinite loop in org.example.pmd.ErrorProne.jumbledIncrementer()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='jumbledIncrementer' primary='true'><SourceLine endBytecode='141' classname='org.example.pmd.ErrorProne' start='104' end='109' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.jumbledIncrementer()</Message></Method><SourceLine endBytecode='13' classname='org.example.pmd.ErrorProne' start='105' end='105' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='13' primary='true'><Message>At ErrorProne.java:[line 105]</Message></SourceLine><SourceLine role='SOURCE_LINE_LOOP_BOTTOM' endBytecode='28' classname='org.example.pmd.ErrorProne' start='105' end='105' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='28'><Message>Loop bottom at ErrorProne.java:[line 105]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='da810c33a9a90e98a016ad49f77b1731' cweid='476' rank='5' abbrev='NP' category='CORRECTNESS' priority='1' type='NP_ALWAYS_NULL' instanceOccurrenceMax='0'><ShortMessage>Null pointer dereference</ShortMessage><LongMessage>Null pointer dereference of string in org.example.pmd.ErrorProne.brokenNullCheck(String)</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='(Ljava/lang/String;)Ljava/lang/String;' name='brokenNullCheck' primary='true'><SourceLine endBytecode='86' classname='org.example.pmd.ErrorProne' start='37' end='40' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.brokenNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='5' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine role='SOURCE_LINE_DEREF' endBytecode='7' classname='org.example.pmd.ErrorProne' start='37' end='37' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='7' primary='true'><Message>Dereferenced at ErrorProne.java:[line 37]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='6db9f30c566eea586655e8d3650f4084' cweid='476' rank='16' abbrev='NP' category='STYLE' priority='2' type='NP_LOAD_OF_KNOWN_NULL_VALUE' instanceOccurrenceMax='0'><ShortMessage>Load of known null value</ShortMessage><LongMessage>Load of known null value in org.example.pmd.ErrorProne.brokenNullCheck(String)</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='(Ljava/lang/String;)Ljava/lang/String;' name='brokenNullCheck' primary='true'><SourceLine endBytecode='9' classname='org.example.pmd.ErrorProne' start='37' end='40' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.brokenNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='1' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine endBytecode='4' classname='org.example.pmd.ErrorProne' start='37' end='37' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='4' primary='true'><Message>At ErrorProne.java:[line 37]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c46445ced248a02930b34294a80c8f09' rank='20' abbrev='OBL' category='EXPERIMENTAL' priority='2' type='OBL_UNSATISFIED_OBLIGATION' instanceOccurrenceMax='0'><ShortMessage>Method may fail to clean up stream or resource</ShortMessage><LongMessage>org.example.pmd.ErrorProne.checkSkipResult() may fail to clean up java.io.InputStream</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='76' classname='org.example.pmd.ErrorProne' start='44' end='46' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.checkSkipResult()</Message></Method><Class role='CLASS_REFTYPE' classname='java.io.InputStream'><SourceLine classname='java.io.InputStream' start='61' end='780' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 61-780]</Message></SourceLine><Message>Reference type java.io.InputStream</Message></Class><Int role='INT_OBLIGATIONS_REMAINING' value='1'><Message>1 instances of obligation remaining</Message></Int><SourceLine role='SOURCE_LINE_OBLIGATION_CREATED' endBytecode='6' classname='org.example.pmd.ErrorProne' start='44' end='44' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='6' primary='true'><Message>Obligation to clean up resource created at ErrorProne.java:[line 44] is not discharged</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='10' classname='org.example.pmd.ErrorProne' start='45' end='45' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='10'><Message>Path continues at ErrorProne.java:[line 45]</Message></SourceLine><SourceLine role='SOURCE_LINE_PATH_CONTINUES' endBytecode='16' classname='org.example.pmd.ErrorProne' start='46' end='46' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='16'><Message>Path continues at ErrorProne.java:[line 46]</Message></SourceLine><String role='STRING_REMAINING_OBLIGATIONS' value='{InputStream x 1}'><Message>Remaining obligations: {InputStream x 1}</Message></String></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='30f42d9f58de367de8f411b7e437b998' rank='16' abbrev='OS' category='BAD_PRACTICE' priority='2' type='OS_OPEN_STREAM' instanceOccurrenceMax='0'><ShortMessage>Method may fail to close stream</ShortMessage><LongMessage>org.example.pmd.ErrorProne.checkSkipResult() may fail to close stream</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='9' classname='org.example.pmd.ErrorProne' start='44' end='46' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.checkSkipResult()</Message></Method><Type role='TYPE_CLOSEIT' descriptor='Ljava/io/InputStream;'><SourceLine classname='java.io.InputStream' start='61' end='780' sourcepath='java/io/InputStream.java' sourcefile='InputStream.java'><Message>At InputStream.java:[lines 61-780]</Message></SourceLine><Message>Need to close java.io.InputStream </Message></Type><SourceLine endBytecode='0' classname='org.example.pmd.ErrorProne' start='44' end='44' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0' primary='true'><Message>At ErrorProne.java:[line 44]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='e5ad5f0c98d326d37fdf6efa66dec9df' rank='17' abbrev='QF' category='STYLE' priority='2' type='QF_QUESTIONABLE_FOR_LOOP' instanceOccurrenceMax='0'><ShortMessage>Complicated, subtle or wrong increment in for-loop</ShortMessage><LongMessage>Complicated, subtle or wrong increment in for-loop org.example.pmd.ErrorProne.jumbledIncrementer()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='jumbledIncrementer' primary='true'><SourceLine endBytecode='141' classname='org.example.pmd.ErrorProne' start='104' end='109' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.jumbledIncrementer()</Message></Method><SourceLine endBytecode='13' classname='org.example.pmd.ErrorProne' start='105' end='105' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='13' primary='true'><Message>At ErrorProne.java:[line 105]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='30260e623f04da59bbf61ae5022bba61' cweid='476' rank='11' abbrev='RCN' category='CORRECTNESS' priority='2' type='RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE' instanceOccurrenceMax='0'><ShortMessage>Nullcheck of value previously dereferenced</ShortMessage><LongMessage>Nullcheck of string at line 112 of value previously dereferenced in org.example.pmd.ErrorProne.misplacedNullCheck(String)</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='(Ljava/lang/String;)Z' name='misplacedNullCheck' primary='true'><SourceLine endBytecode='81' classname='org.example.pmd.ErrorProne' start='112' end='112' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.misplacedNullCheck(String)</Message></Method><LocalVariable role='LOCAL_VARIABLE_VALUE_OF' pc='9' name='string' register='1'><Message>Value loaded from string</Message></LocalVariable><SourceLine endBytecode='3' classname='org.example.pmd.ErrorProne' start='112' end='112' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='3' primary='true'><Message>At ErrorProne.java:[line 112]</Message></SourceLine><SourceLine role='SOURCE_REDUNDANT_NULL_CHECK' endBytecode='10' classname='org.example.pmd.ErrorProne' start='112' end='112' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='10'><Message>Redundant null check at ErrorProne.java:[line 112]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f14b465b36f5f6750babc91598c517b1' cweid='440' rank='3' abbrev='RV' category='CORRECTNESS' priority='1' type='RV_RETURN_VALUE_IGNORED' instanceOccurrenceMax='0'><ShortMessage>Method ignores return value</ShortMessage><LongMessage>Return value of java.math.BigDecimal.add(BigDecimal) ignored in org.example.pmd.ErrorProne.uselessOperationOnImmutable()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='uselessOperationOnImmutable' primary='true'><SourceLine endBytecode='83' classname='org.example.pmd.ErrorProne' start='143' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.uselessOperationOnImmutable()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.math.BigDecimal' signature='(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;' name='add'><SourceLine endBytecode='199' classname='java.math.BigDecimal' start='1318' end='1328' sourcepath='java/math/BigDecimal.java' sourcefile='BigDecimal.java' startBytecode='0'></SourceLine><Message>Called method java.math.BigDecimal.add(BigDecimal)</Message></Method><SourceLine endBytecode='19' classname='org.example.pmd.ErrorProne' start='144' end='144' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='19' primary='true'><Message>At ErrorProne.java:[line 144]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='c008c86270133f78ca0d09a2495554f' rank='16' abbrev='RR' category='BAD_PRACTICE' priority='2' type='SR_NOT_CHECKED' instanceOccurrenceMax='0'><ShortMessage>Method ignores results of InputStream.skip()</ShortMessage><LongMessage>org.example.pmd.ErrorProne.checkSkipResult() ignores result of java.io.FileInputStream.skip(long)</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='checkSkipResult' primary='true'><SourceLine endBytecode='76' classname='org.example.pmd.ErrorProne' start='44' end='46' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.checkSkipResult()</Message></Method><Method isStatic='false' role='METHOD_CALLED' classname='java.io.FileInputStream' signature='(J)J' name='skip'><SourceLine endBytecode='57' classname='java.io.FileInputStream' start='300' end='300' sourcepath='java/io/FileInputStream.java' sourcefile='FileInputStream.java' startBytecode='0'></SourceLine><Message>Called method java.io.FileInputStream.skip(long)</Message></Method><SourceLine endBytecode='12' classname='org.example.pmd.ErrorProne' start='45' end='45' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='12' primary='true'><Message>At ErrorProne.java:[line 45]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='db61905cdb6b1655671a0c20a7ebc45d' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_OBJECT' instanceOccurrenceMax='0'><ShortMessage>Useless object created</ShortMessage><LongMessage>Useless object stored in variable collection of method org.example.pmd.ErrorProne.classCastExceptionWithToArray()</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='103' classname='org.example.pmd.ErrorProne' start='49' end='52' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.classCastExceptionWithToArray()</Message></Method><String value='collection'><Message>Value collection</Message></String><Type descriptor='Ljava/util/ArrayList;'><SourceLine classname='java.util.ArrayList' start='123' end='1729' sourcepath='java/util/ArrayList.java' sourcefile='ArrayList.java'><Message>At ArrayList.java:[lines 123-1729]</Message></SourceLine><Message>Type java.util.ArrayList</Message></Type><SourceLine endBytecode='4' classname='org.example.pmd.ErrorProne' start='49' end='49' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='4' primary='true'><Message>At ErrorProne.java:[line 49]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f441e5b5a6c0302e9025b14d49b1f114' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.pmd.ErrorProne.avoidBranchingStatementAsLastInLoop() seems to be useless</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='avoidBranchingStatementAsLastInLoop' primary='true'><SourceLine endBytecode='101' classname='org.example.pmd.ErrorProne' start='16' end='22' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.avoidBranchingStatementAsLastInLoop()</Message></Method><SourceLine endBytecode='22' classname='org.example.pmd.ErrorProne' start='22' end='22' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='22' primary='true'><Message>At ErrorProne.java:[line 22]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='f6f0ab0cc93e5089982416bcd90df562' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.pmd.ErrorProne.classCastExceptionWithToArray() seems to be useless</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='classCastExceptionWithToArray' primary='true'><SourceLine endBytecode='103' classname='org.example.pmd.ErrorProne' start='49' end='52' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.classCastExceptionWithToArray()</Message></Method><SourceLine endBytecode='29' classname='org.example.pmd.ErrorProne' start='52' end='52' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='29' primary='true'><Message>At ErrorProne.java:[line 52]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='a905f3bf81cfe8e24d8d49a6291a5f3c' rank='17' abbrev='UC' category='STYLE' priority='2' type='UC_USELESS_VOID_METHOD' instanceOccurrenceMax='0'><ShortMessage>Useless non-empty void method</ShortMessage><LongMessage>Method org.example.pmd.ErrorProne.dontUseFloatTypeForLoopIndices() seems to be useless</LongMessage><Class classname='org.example.pmd.ErrorProne' primary='true'><SourceLine classname='org.example.pmd.ErrorProne' start='11' end='145' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java'><Message>At ErrorProne.java:[lines 11-145]</Message></SourceLine><Message>In class org.example.pmd.ErrorProne</Message></Class><Method isStatic='false' classname='org.example.pmd.ErrorProne' signature='()V' name='dontUseFloatTypeForLoopIndices' primary='true'><SourceLine endBytecode='87' classname='org.example.pmd.ErrorProne' start='55' end='58' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.ErrorProne.dontUseFloatTypeForLoopIndices()</Message></Method><SourceLine endBytecode='16' classname='org.example.pmd.ErrorProne' start='58' end='58' sourcepath='org/example/pmd/ErrorProne.java' sourcefile='ErrorProne.java' startBytecode='16' primary='true'><Message>At ErrorProne.java:[line 58]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ec381e7395c49d711bc2054084380394' cweid='609' rank='14' abbrev='DC' category='MT_CORRECTNESS' priority='2' type='DC_DOUBLECHECK' instanceOccurrenceMax='0'><ShortMessage>Possible double check of field</ShortMessage><LongMessage>Possible doublecheck on org.example.pmd.Multithreading.object in org.example.pmd.Multithreading.doubleCheckedLocking()</LongMessage><Class classname='org.example.pmd.Multithreading' primary='true'><SourceLine classname='org.example.pmd.Multithreading' start='3' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>At Multithreading.java:[lines 3-23]</Message></SourceLine><Message>In class org.example.pmd.Multithreading</Message></Class><Method isStatic='false' classname='org.example.pmd.Multithreading' signature='()Ljava/lang/Object;' name='doubleCheckedLocking' primary='true'><SourceLine endBytecode='142' classname='org.example.pmd.Multithreading' start='16' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.Multithreading.doubleCheckedLocking()</Message></Method><Field isStatic='false' role='FIELD_ON' classname='org.example.pmd.Multithreading' signature='Ljava/lang/Object;' name='object' primary='true'><SourceLine classname='org.example.pmd.Multithreading' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>In Multithreading.java</Message></SourceLine><Message>On field org.example.pmd.Multithreading.object</Message></Field><SourceLine endBytecode='15' classname='org.example.pmd.Multithreading' start='16' end='18' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='4' primary='true'><Message>At Multithreading.java:[lines 16-18]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='573ffa89a74b52f6f8e496db061d1707' cweid='563' rank='15' abbrev='DLS' category='STYLE' priority='1' type='DLS_DEAD_LOCAL_STORE' instanceOccurrenceMax='0'><ShortMessage>Dead store to local variable</ShortMessage><LongMessage>Dead store to tg in org.example.pmd.Multithreading.avoidThreadGroup()</LongMessage><Class classname='org.example.pmd.Multithreading' primary='true'><SourceLine classname='org.example.pmd.Multithreading' start='3' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>At Multithreading.java:[lines 3-23]</Message></SourceLine><Message>In class org.example.pmd.Multithreading</Message></Class><Method isStatic='false' classname='org.example.pmd.Multithreading' signature='()V' name='avoidThreadGroup' primary='true'><SourceLine endBytecode='5' classname='org.example.pmd.Multithreading' start='8' end='9' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.Multithreading.avoidThreadGroup()</Message></Method><LocalVariable role='LOCAL_VARIABLE_NAMED' pc='10' name='tg' register='1'><Message>Local variable named tg</Message></LocalVariable><SourceLine endBytecode='9' classname='org.example.pmd.Multithreading' start='8' end='8' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='9' primary='true'><Message>At Multithreading.java:[line 8]</Message></SourceLine><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.DEAD_OBJECT_STORE' value='true'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.LOCAL_NAME' value='tg'></Property><Property name='edu.umd.cs.findbugs.detect.DeadLocalStoreProperty.METHOD_RESULT' value='true'></Property></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='3814dfde288947e61da06ae53d67bbdd' cweid='366' rank='17' abbrev='IS' category='MT_CORRECTNESS' priority='2' type='IS2_INCONSISTENT_SYNC' instanceOccurrenceMax='0'><ShortMessage>Inconsistent synchronization</ShortMessage><LongMessage>Inconsistent synchronization of org.example.pmd.Multithreading.object; locked 40% of time</LongMessage><Class classname='org.example.pmd.Multithreading' primary='true'><SourceLine classname='org.example.pmd.Multithreading' start='3' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>At Multithreading.java:[lines 3-23]</Message></SourceLine><Message>In class org.example.pmd.Multithreading</Message></Class><Field isStatic='false' classname='org.example.pmd.Multithreading' signature='Ljava/lang/Object;' name='object' primary='true'><SourceLine classname='org.example.pmd.Multithreading' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>In Multithreading.java</Message></SourceLine><Message>Field org.example.pmd.Multithreading.object</Message></Field><Int role='INT_SYNC_PERCENT' value='40'><Message>Synchronized 40% of the time</Message></Int><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='1' classname='org.example.pmd.Multithreading' start='16' end='16' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='1' primary='true'><Message>Unsynchronized access at Multithreading.java:[line 16]</Message></SourceLine><SourceLine role='SOURCE_LINE_UNSYNC_ACCESS' endBytecode='40' classname='org.example.pmd.Multithreading' start='23' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='40'><Message>Unsynchronized access at Multithreading.java:[line 23]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='12' classname='org.example.pmd.Multithreading' start='18' end='18' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='12'><Message>Synchronized access at Multithreading.java:[line 18]</Message></SourceLine><SourceLine role='SOURCE_LINE_SYNC_ACCESS' endBytecode='26' classname='org.example.pmd.Multithreading' start='19' end='19' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='26'><Message>Synchronized access at Multithreading.java:[line 19]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='ba2675c840f7697af11b7f03bc8d3722' cweid='572' rank='14' abbrev='Ru' category='MT_CORRECTNESS' priority='2' type='RU_INVOKE_RUN' instanceOccurrenceMax='0'><ShortMessage>Invokes run on a thread (did you mean to start it instead?)</ShortMessage><LongMessage>org.example.pmd.Multithreading.dontCallThreadRun() explicitly invokes run on a thread (did you mean to start it instead?)</LongMessage><Class classname='org.example.pmd.Multithreading' primary='true'><SourceLine classname='org.example.pmd.Multithreading' start='3' end='23' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java'><Message>At Multithreading.java:[lines 3-23]</Message></SourceLine><Message>In class org.example.pmd.Multithreading</Message></Class><Method isStatic='false' classname='org.example.pmd.Multithreading' signature='()V' name='dontCallThreadRun' primary='true'><SourceLine endBytecode='56' classname='org.example.pmd.Multithreading' start='12' end='13' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.Multithreading.dontCallThreadRun()</Message></Method><SourceLine endBytecode='7' classname='org.example.pmd.Multithreading' start='12' end='12' sourcepath='org/example/pmd/Multithreading.java' sourcefile='Multithreading.java' startBytecode='7' primary='true'><Message>At Multithreading.java:[line 12]</Message></SourceLine></BugInstance><BugInstance instanceOccurrenceNum='0' instanceHash='fc187b95f9c0e04c91dd74bfdefa449a' rank='18' abbrev='Dm' category='PERFORMANCE' priority='2' type='DM_BOOLEAN_CTOR' instanceOccurrenceMax='0'><ShortMessage>Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead</ShortMessage><LongMessage>org.example.pmd.Performance.booleanInstantiation() invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead</LongMessage><Class classname='org.example.pmd.Performance' primary='true'><SourceLine classname='org.example.pmd.Performance' start='5' end='12' sourcepath='org/example/pmd/Performance.java' sourcefile='Performance.java'><Message>At Performance.java:[lines 5-12]</Message></SourceLine><Message>In class org.example.pmd.Performance</Message></Class><Method isStatic='false' classname='org.example.pmd.Performance' signature='()Ljava/lang/Boolean;' name='booleanInstantiation' primary='true'><SourceLine endBytecode='51' classname='org.example.pmd.Performance' start='12' end='12' sourcepath='org/example/pmd/Performance.java' sourcefile='Performance.java' startBytecode='0'></SourceLine><Message>In method org.example.pmd.Performance.booleanInstantiation()</Message></Method><SourceLine endBytecode='6' classname='org.example.pmd.Performance' start='12' end='12' sourcepath='org/example/pmd/Performance.java' sourcefile='Performance.java' startBytecode='6' primary='true'><Message>At Performance.java:[line 12]</Message></SourceLine></BugInstance><BugCategory category='BAD_PRACTICE'><Description>Bad practice</Description></BugCategory><BugCategory category='CORRECTNESS'><Description>Correctness</Description></BugCategory><BugCategory category='PERFORMANCE'><Description>Performance</Description></BugCategory><BugCategory category='STYLE'><Description>Dodgy code</Description></BugCategory><BugCategory category='EXPERIMENTAL'><Description>Experimental</Description></BugCategory><BugCategory category='MT_CORRECTNESS'><Description>Multithreaded correctness</Description></BugCategory><BugPattern abbrev='DLS' category='STYLE' type='DLS_DEAD_LOCAL_STORE'><ShortDescription>Dead store to local variable</ShortDescription><Details>

&lt;p&gt;
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
&lt;/p&gt;
&lt;p&gt;
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because SpotBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='UrF' category='STYLE' type='URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD'><ShortDescription>Unread public/protected field</ShortDescription><Details>

  &lt;p&gt; This field is never read.&amp;nbsp;
The field is public or protected, so perhaps
    it is intended to be used with classes not seen as part of the analysis. If not,
consider removing it from the class.&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='572' abbrev='Ru' category='MT_CORRECTNESS' type='RU_INVOKE_RUN'><ShortDescription>Invokes run on a thread (did you mean to start it instead?)</ShortDescription><Details>

  &lt;p&gt; This method explicitly invokes &lt;code&gt;run()&lt;/code&gt; on an object.&amp;nbsp;
  In general, classes implement the &lt;code&gt;Runnable&lt;/code&gt; interface because
  they are going to have their &lt;code&gt;run()&lt;/code&gt; method invoked in a new thread,
  in which case &lt;code&gt;Thread.start()&lt;/code&gt; is the right method to call.&lt;/p&gt;

    </Details></BugPattern><BugPattern cweid='570' abbrev='BC' category='CORRECTNESS' type='BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY'><ShortDescription>Impossible downcast of toArray() result</ShortDescription><Details>

&lt;p&gt;
This code is casting the result of calling &lt;code&gt;toArray()&lt;/code&gt; on a collection
to a type more specific than &lt;code&gt;Object[]&lt;/code&gt;, as in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String[] getAsArray(Collection&amp;lt;String&amp;gt; c) {
    return (String[]) c.toArray();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will usually fail by throwing a ClassCastException. The &lt;code&gt;toArray()&lt;/code&gt;
of almost all collections return an &lt;code&gt;Object[]&lt;/code&gt;. They can't really do anything else,
since the Collection object has no reference to the declared generic type of the collection.
&lt;p&gt;The correct way to do get an array of a specific type from a collection is to use
  &lt;code&gt;c.toArray(new String[]);&lt;/code&gt;
  or &lt;code&gt;c.toArray(new String[c.size()]);&lt;/code&gt; (the latter is slightly more efficient).
&lt;p&gt;There is one common/known exception to this. The &lt;code&gt;toArray()&lt;/code&gt;
method of lists returned by &lt;code&gt;Arrays.asList(...)&lt;/code&gt; will return a covariantly
typed array. For example, &lt;code&gt;Arrays.asArray(new String[] { "a" }).toArray()&lt;/code&gt;
will return a &lt;code&gt;String []&lt;/code&gt;. SpotBugs attempts to detect and suppress
such cases, but may miss some.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='NP' category='STYLE' type='NP_LOAD_OF_KNOWN_NULL_VALUE'><ShortDescription>Load of known null value</ShortDescription><Details>

  &lt;p&gt; The variable referenced at this point is known to be null due to an earlier
   check against null. Although this is valid, it might be a mistake (perhaps you
intended to refer to a different variable, or perhaps the earlier check to see if the
variable is null should have been a check to see if it was non-null).
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='Bx' category='PERFORMANCE' type='DM_BOXED_PRIMITIVE_TOSTRING'><ShortDescription>Method allocates a boxed primitive just to call toString</ShortDescription><Details>

  &lt;p&gt;A boxed primitive is allocated just to call toString(). It is more effective to just use the static
  form of toString which takes the primitive value. So,&lt;/p&gt;
  &lt;table&gt;
     &lt;tr&gt;&lt;th&gt;Replace...&lt;/th&gt;&lt;th&gt;With this...&lt;/th&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Integer(1).toString()&lt;/td&gt;&lt;td&gt;Integer.toString(1)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Long(1).toString()&lt;/td&gt;&lt;td&gt;Long.toString(1)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Float(1.0).toString()&lt;/td&gt;&lt;td&gt;Float.toString(1.0)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Double(1.0).toString()&lt;/td&gt;&lt;td&gt;Double.toString(1.0)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Byte(1).toString()&lt;/td&gt;&lt;td&gt;Byte.toString(1)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Short(1).toString()&lt;/td&gt;&lt;td&gt;Short.toString(1)&lt;/td&gt;&lt;/tr&gt;
     &lt;tr&gt;&lt;td&gt;new Boolean(true).toString()&lt;/td&gt;&lt;td&gt;Boolean.toString(true)&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;

    </Details></BugPattern><BugPattern abbrev='RR' category='BAD_PRACTICE' type='SR_NOT_CHECKED'><ShortDescription>Method ignores results of InputStream.skip()</ShortDescription><Details>

  &lt;p&gt; This method ignores the return value of
  &lt;code&gt;java.io.InputStream.skip()&lt;/code&gt; which can skip multiple bytes.&amp;nbsp;
  If the return value is not checked, the caller will not be able to correctly
  handle the case where fewer bytes were skipped than the caller requested.&amp;nbsp;
  This is a particularly insidious kind of bug, because in many programs,
  skips from input streams usually do skip the full amount of data requested,
  causing the program to fail only sporadically. With Buffered streams, however,
  skip() will only skip data in the buffer, and will routinely fail to skip the
  requested number of bytes.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='UC' category='STYLE' type='UC_USELESS_OBJECT'><ShortDescription>Useless object created</ShortDescription><Details>

&lt;p&gt;Our analysis shows that this object is useless.
It's created and modified, but its value never go outside of the method or produce any side-effect.
Either there is a mistake and object was intended to be used or it can be removed.&lt;/p&gt;
&lt;p&gt;This analysis rarely produces false-positives. Common false-positive cases include:&lt;/p&gt;
&lt;p&gt;- This object used to implicitly throw some obscure exception.&lt;/p&gt;
&lt;p&gt;- This object used as a stub to generalize the code.&lt;/p&gt;
&lt;p&gt;- This object used to hold strong references to weak/soft-referenced objects.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='IL' category='CORRECTNESS' type='IL_INFINITE_LOOP'><ShortDescription>An apparent infinite loop</ShortDescription><Details>

&lt;p&gt;This loop doesn't seem to have a way to terminate (other than by perhaps
throwing an exception).&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='DMI' category='CORRECTNESS' type='DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE'><ShortDescription>BigDecimal constructed from double that isn't represented precisely</ShortDescription><Details>
      
    &lt;p&gt;
This code creates a BigDecimal from a double value that doesn't translate well to a
decimal number.
For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.
You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation
of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).
&lt;/p&gt;


    </Details></BugPattern><BugPattern abbrev='OBL' category='EXPERIMENTAL' type='OBL_UNSATISFIED_OBLIGATION'><ShortDescription>Method may fail to clean up stream or resource</ShortDescription><Details>
          
          &lt;p&gt;
          This method may fail to clean up (close, dispose of) a stream,
          database object, or other
          resource requiring an explicit cleanup operation.
          &lt;/p&gt;

          &lt;p&gt;
          In general, if a method opens a stream or other resource,
          the method should use a try/finally block to ensure that
          the stream or resource is cleaned up before the method
          returns.
          &lt;/p&gt;

          &lt;p&gt;
          This bug pattern is essentially the same as the
          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
          bug patterns, but is based on a different
          (and hopefully better) static analysis technique.
          We are interested is getting feedback about the
          usefulness of this bug pattern.
          For sending feedback, check:
          &lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;&lt;a href="https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md"&gt;contributing guideline&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="https://github.com/spotbugs/discuss/issues?q="&gt;malinglist&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;

          &lt;p&gt;
          In particular,
          the false-positive suppression heuristics for this
          bug pattern have not been extensively tuned, so
          reports about false positives are helpful to us.
          &lt;/p&gt;

          &lt;p&gt;
          See Weimer and Necula, &lt;i&gt;Finding and Preventing Run-Time Error Handling Mistakes&lt;/i&gt;, for
          a description of the analysis technique.
          &lt;/p&gt;
          
      </Details></BugPattern><BugPattern cweid='609' abbrev='DC' category='MT_CORRECTNESS' type='DC_DOUBLECHECK'><ShortDescription>Possible double check of field</ShortDescription><Details>

  &lt;p&gt; This method may contain an instance of double-checked locking.&amp;nbsp;
  This idiom is not correct according to the semantics of the Java memory
  model.&amp;nbsp; For more information, see the web page
  &lt;a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"
  &gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='RCN' category='CORRECTNESS' type='RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE'><ShortDescription>Nullcheck of value previously dereferenced</ShortDescription><Details>

&lt;p&gt; A value is checked here to see whether it is null, but this value can't
be null because it was previously dereferenced and if it were null a null pointer
exception would have occurred at the earlier dereference.
Essentially, this code and the previous dereference
disagree as to whether this value is allowed to be null. Either the check is redundant
or the previous dereference is erroneous.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='NP' category='CORRECTNESS' type='NP_ALWAYS_NULL'><ShortDescription>Null pointer dereference</ShortDescription><Details>

&lt;p&gt; A null pointer is dereferenced here.&amp;nbsp; This will lead to a
&lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='RV' category='CORRECTNESS' type='RV_RETURN_VALUE_IGNORED'><ShortDescription>Method ignores return value</ShortDescription><Details>

   &lt;p&gt; The return value of this method should be checked. One common
cause of this warning is to invoke a method on an immutable object,
thinking that it updates the object. For example, in the following code
fragment,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString.trim();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the programmer seems to be thinking that the trim() method will update
the String referenced by dateString. But since Strings are immutable, the trim()
function returns a new String value, which is being ignored here. The code
should be corrected to: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String dateString = getHeaderField(name);
dateString = dateString.trim();
&lt;/code&gt;&lt;/pre&gt;

    </Details></BugPattern><BugPattern abbrev='Dm' category='PERFORMANCE' type='DM_BOOLEAN_CTOR'><ShortDescription>Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead</ShortDescription><Details>

  &lt;p&gt; Creating new instances of &lt;code&gt;java.lang.Boolean&lt;/code&gt; wastes
  memory, since &lt;code&gt;Boolean&lt;/code&gt; objects are immutable and there are
  only two useful values of this type.&amp;nbsp; Use the &lt;code&gt;Boolean.valueOf()&lt;/code&gt;
  method (or Java 1.5 autoboxing) to create &lt;code&gt;Boolean&lt;/code&gt; objects instead.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='ODR' category='BAD_PRACTICE' type='ODR_OPEN_DATABASE_RESOURCE'><ShortDescription>Method may fail to close database resource</ShortDescription><Details>

&lt;p&gt; The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all paths out of the method.&amp;nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='UuF' category='PERFORMANCE' type='UUF_UNUSED_FIELD'><ShortDescription>Unused field</ShortDescription><Details>

  &lt;p&gt; This field is never used.&amp;nbsp; Consider removing it from the class.&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='QF' category='STYLE' type='QF_QUESTIONABLE_FOR_LOOP'><ShortDescription>Complicated, subtle or wrong increment in for-loop</ShortDescription><Details>

   &lt;p&gt;Are you sure this for loop is incrementing the correct variable?
   It appears that another variable is being initialized and checked
   by the for loop.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='Bx' category='PERFORMANCE' type='DM_NUMBER_CTOR'><ShortDescription>Method invokes inefficient Number constructor; use static valueOf instead</ShortDescription><Details>
      
      &lt;p&gt;
      Using &lt;code&gt;new Integer(int)&lt;/code&gt; is guaranteed to always result in a new object whereas
      &lt;code&gt;Integer.valueOf(int)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM.
      Using of cached values avoids object allocation and the code will be faster.
      &lt;/p&gt;
      &lt;p&gt;
      Values between -128 and 127 are guaranteed to have corresponding cached instances
      and using &lt;code&gt;valueOf&lt;/code&gt; is approximately 3.5 times faster than using constructor.
      For values outside the constant range the performance of both styles is the same.
      &lt;/p&gt;
      &lt;p&gt;
      Unless the class must be compatible with JVMs predating Java 1.5,
      use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of
      &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, and &lt;code&gt;Byte&lt;/code&gt;.
      &lt;/p&gt;
      
    </Details></BugPattern><BugPattern abbrev='IS' category='MT_CORRECTNESS' type='IS2_INCONSISTENT_SYNC'><ShortDescription>Inconsistent synchronization</ShortDescription><Details>

  &lt;p&gt; The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&amp;nbsp; This bug report indicates that the bug pattern detector
  judged that
  &lt;/p&gt;
  &lt;ul&gt;
  &lt;li&gt; The class contains a mix of locked and unlocked accesses,&lt;/li&gt;
  &lt;li&gt; The class is &lt;b&gt;not&lt;/b&gt; annotated as javax.annotation.concurrent.NotThreadSafe,&lt;/li&gt;
  &lt;li&gt; At least one locked access was performed by one of the class's own methods, and&lt;/li&gt;
  &lt;li&gt; The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt; A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.&lt;/p&gt;

  &lt;p&gt; You can select the nodes labeled "Unsynchronized access" to show the
  code locations where the detector believed that a field was accessed
  without synchronization.&lt;/p&gt;

  &lt;p&gt; Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&amp;nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.&lt;/p&gt;


    </Details></BugPattern><BugPattern abbrev='UC' category='STYLE' type='UC_USELESS_VOID_METHOD'><ShortDescription>Useless non-empty void method</ShortDescription><Details>

&lt;p&gt;Our analysis shows that this non-empty void method does not actually perform any useful work.
Please check it: probably there's a mistake in its code or its body can be fully removed.
&lt;/p&gt;
&lt;p&gt;We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.
Common false-positive cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method is intended to trigger loading of some class which may have a side effect.&lt;/li&gt;
&lt;li&gt;The method is intended to implicitly throw some obscure exception.&lt;/li&gt;
&lt;/ul&gt;

    </Details></BugPattern><BugPattern cweid='585' abbrev='ESync' category='MT_CORRECTNESS' type='ESync_EMPTY_SYNC'><ShortDescription>Empty synchronized block</ShortDescription><Details>

  &lt;p&gt; The code contains an empty synchronized block:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;synchronized() {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empty synchronized blocks are far more subtle and hard to use correctly
than most people recognize, and empty synchronized blocks
are almost never a better solution
than less contrived solutions.
&lt;/p&gt;

    </Details></BugPattern><BugPattern abbrev='OS' category='BAD_PRACTICE' type='OS_OPEN_STREAM'><ShortDescription>Method may fail to close stream</ShortDescription><Details>

&lt;p&gt; The method creates an IO stream object, does not assign it to any
fields, pass it to other methods that might close it,
or return it, and does not appear to close
the stream on all paths out of the method.&amp;nbsp; This may result in
a file descriptor leak.&amp;nbsp; It is generally a good
idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are
closed.&lt;/p&gt;

    </Details></BugPattern><BugCode abbrev='RR'><Description>Method ignores results of InputStream.read()</Description></BugCode><BugCode abbrev='BC'><Description>Bad casts of object references</Description></BugCode><BugCode cweid='440' abbrev='DMI'><Description>Dubious method invocation</Description></BugCode><BugCode cweid='476' abbrev='NP'><Description>Null pointer dereference</Description></BugCode><BugCode abbrev='IL'><Description>Infinite Loop</Description></BugCode><BugCode abbrev='Ru'><Description>Method invokes run()</Description></BugCode><BugCode abbrev='OS'><Description>Stream not closed on all paths</Description></BugCode><BugCode cweid='440' abbrev='RV'><Description>Bad use of return value from method</Description></BugCode><BugCode abbrev='UuF'><Description>Unused field</Description></BugCode><BugCode abbrev='UrF'><Description>Unread field</Description></BugCode><BugCode abbrev='Dm'><Description>Dubious method used</Description></BugCode><BugCode cweid='563' abbrev='DLS'><Description>Dead local store</Description></BugCode><BugCode cweid='366' abbrev='IS'><Description>Inconsistent synchronization</Description></BugCode><BugCode abbrev='UC'><Description>Useless code</Description></BugCode><BugCode abbrev='ESync'><Description>Empty Synchronized blocks</Description></BugCode><BugCode abbrev='QF'><Description>Questionable for loops</Description></BugCode><BugCode abbrev='Bx'><Description>Questionable Boxing of primitive value</Description></BugCode><BugCode abbrev='OBL'><Description>Unsatisfied obligation to clean up stream or resource</Description></BugCode><BugCode cweid='476' abbrev='RCN'><Description>Redundant comparison to null</Description></BugCode><BugCode abbrev='ODR'><Description>Database resource not closed on all paths</Description></BugCode><BugCode abbrev='DC'><Description>Double check pattern</Description></BugCode><Errors missingClasses='0' errors='0'></Errors><FindBugsSummary num_packages='2' total_classes='15' priority_1='10' priority_2='41' total_size='233' clock_seconds='2.00' referenced_classes='58' vm_version='14.0.1+14' total_bugs='51' java_version='14.0.1' gc_seconds='0.01' alloc_mbytes='512.00' cpu_seconds='9.23' peak_mbytes='204.40' timestamp='Sat, 19 Dec 2020 15:17:02 -0800'><FileStats path='org/example/cpd/ErrorProne.java' size='72' bugHash='b4242eba1f74f401700f046edbd414b5' bugCount='19'></FileStats><FileStats path='org/example/pmd/BestPractices.java' size='15' bugHash='0ed9dd5a71dc7b93a6eb4ea5b7031e9c' bugCount='6'></FileStats><FileStats path='org/example/pmd/CodeStyle.java' size='37' bugHash='dde2f4a46584b3a25cc45cfb98fc2355' bugCount='1'></FileStats><FileStats path='org/example/pmd/Design.java' size='12' bugHash='df0420a152fb2f057fe424dadc84fe22' bugCount='1'></FileStats><FileStats path='org/example/pmd/ErrorProne.java' size='72' bugHash='7f6e1d435902ad22a47f83acd9122ee0' bugCount='19'></FileStats><FileStats path='org/example/pmd/Multithreading.java' size='18' bugHash='b2fe7d364b6302e8b210e8a6bbe8d59d' bugCount='4'></FileStats><FileStats path='org/example/pmd/Performance.java' size='7' bugHash='5402d6aaadc408b90f1a2832e7652e7b' bugCount='1'></FileStats><PackageStats package='org.example.cpd' priority_1='4' total_bugs='19' priority_2='15' total_size='72' total_types='1'><ClassStats bugs='19' size='72' priority_1='4' priority_2='15' interface='false' sourceFile='ErrorProne.java' class='org.example.cpd.ErrorProne'></ClassStats></PackageStats><PackageStats package='org.example.pmd' priority_1='6' total_bugs='32' priority_2='26' total_size='161' total_types='14'><ClassStats bugs='6' size='15' priority_1='1' priority_2='5' interface='false' sourceFile='BestPractices.java' class='org.example.pmd.BestPractices'></ClassStats><ClassStats bugs='1' size='15' priority_2='1' interface='false' sourceFile='CodeStyle.java' class='org.example.pmd.CodeStyle'></ClassStats><ClassStats bugs='0' size='1' interface='true' sourceFile='CodeStyle.java' class='org.example.pmd.CodeStyle$UnnecessaryModifier'></ClassStats><ClassStats bugs='0' size='7' interface='false' sourceFile='CodeStyle.java' class='org.example.pmd.CodeStyle$UnnecessaryModifierEnum'></ClassStats><ClassStats bugs='1' size='12' priority_2='1' interface='false' sourceFile='Design.java' class='org.example.pmd.Design'></ClassStats><ClassStats bugs='19' size='72' priority_1='4' priority_2='15' interface='false' sourceFile='ErrorProne.java' class='org.example.pmd.ErrorProne'></ClassStats><ClassStats bugs='4' size='18' priority_1='1' priority_2='3' interface='false' sourceFile='Multithreading.java' class='org.example.pmd.Multithreading'></ClassStats><ClassStats bugs='1' size='7' priority_2='1' interface='false' sourceFile='Performance.java' class='org.example.pmd.Performance'></ClassStats><ClassStats bugs='0' size='3' interface='true' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifier'></ClassStats><ClassStats bugs='0' size='3' interface='false' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifier$PublicStaticClass'></ClassStats><ClassStats bugs='0' size='1' interface='true' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifier$PublicStaticInterface'></ClassStats><ClassStats bugs='0' size='3' interface='true' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifierAnnotation'></ClassStats><ClassStats bugs='0' size='3' interface='false' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifierAnnotation$PublicStaticClass'></ClassStats><ClassStats bugs='0' size='1' interface='true' sourceFile='CodeStyle.java' class='org.example.pmd.UnnecessaryModifierAnnotation$PublicStaticInterface'></ClassStats></PackageStats><FindBugsProfile><ClassProfile avgMicrosecondsPerInvocation='753' totalMilliseconds='409' name='edu.umd.cs.findbugs.classfile.engine.ClassInfoAnalysisEngine' maxMicrosecondsPerInvocation='13254' standardDeviationMicrosecondsPerInvocation='1490' invocations='543'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='2207' totalMilliseconds='128' name='edu.umd.cs.findbugs.detect.FieldItemSummary' maxMicrosecondsPerInvocation='13893' standardDeviationMicrosecondsPerInvocation='3885' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='345' totalMilliseconds='93' name='edu.umd.cs.findbugs.OpcodeStack$JumpInfoFactory' maxMicrosecondsPerInvocation='3145' standardDeviationMicrosecondsPerInvocation='493' invocations='271'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='145' totalMilliseconds='79' name='edu.umd.cs.findbugs.classfile.engine.ClassDataAnalysisEngine' maxMicrosecondsPerInvocation='4618' standardDeviationMicrosecondsPerInvocation='230' invocations='549'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='1236' totalMilliseconds='71' name='edu.umd.cs.findbugs.detect.FindNoSideEffectMethods' maxMicrosecondsPerInvocation='6772' standardDeviationMicrosecondsPerInvocation='1871' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='771' totalMilliseconds='44' name='edu.umd.cs.findbugs.detect.NoteDirectlyRelevantTypeQualifiers' maxMicrosecondsPerInvocation='6751' standardDeviationMicrosecondsPerInvocation='1415' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='470' totalMilliseconds='44' name='edu.umd.cs.findbugs.classfile.engine.bcel.JavaClassAnalysisEngine' maxMicrosecondsPerInvocation='13949' standardDeviationMicrosecondsPerInvocation='1705' invocations='95'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='86' totalMilliseconds='43' name='edu.umd.cs.findbugs.util.TopologicalSort' maxMicrosecondsPerInvocation='1531' standardDeviationMicrosecondsPerInvocation='163' invocations='506'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='742' totalMilliseconds='43' name='edu.umd.cs.findbugs.detect.FunctionsThatMightBeMistakenForProcedures' maxMicrosecondsPerInvocation='7716' standardDeviationMicrosecondsPerInvocation='1700' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='457' totalMilliseconds='35' name='edu.umd.cs.findbugs.classfile.engine.bcel.MethodGenFactory' maxMicrosecondsPerInvocation='26906' standardDeviationMicrosecondsPerInvocation='3015' invocations='78'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='577' totalMilliseconds='33' name='edu.umd.cs.findbugs.detect.BuildObligationPolicyDatabase' maxMicrosecondsPerInvocation='4480' standardDeviationMicrosecondsPerInvocation='943' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='412' totalMilliseconds='31' name='edu.umd.cs.findbugs.ba.npe.NullDerefAndRedundantComparisonFinder' maxMicrosecondsPerInvocation='12543' standardDeviationMicrosecondsPerInvocation='1528' invocations='76'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='493' totalMilliseconds='28' name='edu.umd.cs.findbugs.detect.OverridingEqualsNotSymmetrical' maxMicrosecondsPerInvocation='8639' standardDeviationMicrosecondsPerInvocation='1256' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='470' totalMilliseconds='27' name='edu.umd.cs.findbugs.detect.CalledMethods' maxMicrosecondsPerInvocation='3842' standardDeviationMicrosecondsPerInvocation='888' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='418' totalMilliseconds='24' name='edu.umd.cs.findbugs.detect.BuildStringPassthruGraph' maxMicrosecondsPerInvocation='7428' standardDeviationMicrosecondsPerInvocation='1021' invocations='58'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='304' totalMilliseconds='23' name='edu.umd.cs.findbugs.classfile.engine.bcel.ValueNumberDataflowFactory' maxMicrosecondsPerInvocation='7343' standardDeviationMicrosecondsPerInvocation='844' invocations='78'></ClassProfile><ClassProfile avgMicrosecondsPerInvocation='305' totalMilliseconds='23' name='edu.umd.cs.findbugs.classfile.engine.bcel.IsNullValueDataflowFactory' maxMicrosecondsPerInvocation='5828' standardDeviationMicrosecondsPerInvocation='683' invocations='76'></ClassProfile></FindBugsProfile></FindBugsSummary><ClassFeatures></ClassFeatures><History></History></BugCollection>